    - read pozo
    - read style
    - get render_traces() calling style
    - test bottom axis
    - test axi son both sides
    - write description of problem, refactor? breadth-first search. document how anchored axis exist w/in fifgure.
    - factor out "make iterable"
    - test height changes
    - check for unused imports
    - pass kwargs better
    - how to deal with more than 4 axis? just keep goin!
    - render functions called on both sides
    - remove from parent if child is deleted __del__
    - make sure axis can't be added twice to same tract
    - what if we delete underlyin data?
    - make data immutable?
    - function to flip axis
    - function to reorder axes
    - use examples
    - tracks have optional names, titles?
    - Combine Axes into one xaxis
    - Design Review with Design Helper Functions
    - Combine Two Figures (Overlow, Concatenate)
        - Concatenate should be default figure behavior, but there could be a match mnemonic directive    
    - Test with title
    - Add ndarray
    - Add xarray
    - Add pandas
    - Add welly well
    - Add welly project
    - Steven's Tops
    - Other categorical data
    - Functions for accessing dictionary
    - need to catch layout change and set ticks (auto nticks doesn't work, no tickmode kinda works, wish i knew what it fucking was)

- Datahealth Visualization (different than tracks)
- Documentation, Docstrings, Tags
- Basic Displayers
    - We need to steal clicks and write clicks
    - You can also add lines
    - You can also shade depths
    - Be able to save visualizations (obviously)
    - But apply that saved visualization to other data? And to include adding and removing curves
    - Margin's on axis
- Change depth/hide/remove/etc visualizations easily
- Calculate Chatter
- Convert to widget and include a pause rendering


Data Structure Enhancements:
- Adding notes on depths
- Adding on depts on curves
- Adding ranges
- Alternative fileformat, LivingLasFiles (versions)
- Curves could be "add to las file" or not
- Welly Based?
- Quality checks

Database Enhancements:
- Browse Mnemonics, Their Relationships, and Recipts for them, Tools, Tolerances, and Ranges

Jupyter Enhancements:
- Las files in their own tab (some kind of versioning/original system)
- Explore las files, menumonics, adn their meanings
- All the just typical juptyer enhancements

Plotly Enhancements:
- Better hover 
- Polygons
- Separate Legends
- Add markers
- mode bar needs to be mine
- mode bar open/close
- more options

read plotly, all of it, yjs, js, python, juperlab, dash, dash-lab
your living las object will be the structure