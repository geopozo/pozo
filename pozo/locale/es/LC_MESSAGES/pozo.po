# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-21 22:42+0000\n"
"PO-Revision-Date: 2024-05-21 18:59-0400\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.4.2\n"

#: pozo/themes/__init__.py:11
msgid "Can be a single color value or list of color values from colour package"
msgstr "Se puede un color o lista de colores del paquete \"colour\""

#: pozo/themes/__init__.py:12
msgid "A number in pixels"
msgstr "Un número en píxeles"

#: pozo/themes/__init__.py:13
msgid "If true, will force show the item even if it has no data"
msgstr "Si \"True\", hará la unidad visible, incluso si no tiene datos"

#: pozo/themes/__init__.py:14
msgid "If true, will not show the item"
msgstr "Si \"True\", no hará la unidad visible"

#: pozo/themes/__init__.py:15
msgid "Sets the default min and max x value for this item"
msgstr "Se pone el mínimo y el máximo del valor para esta unidad"

#: pozo/themes/__init__.py:16
msgid "Specifies the range units"
msgstr "Se ponen las unidades del rango \"range\""

#: pozo/themes/__init__.py:17
msgid "Can be log or linear"
msgstr "Se puede ser \"log\" o \"linear\""

#: pozo/themes/__init__.py:18
msgid "A plotly fill description EXPERIMENTAL"
msgstr "Un relleno de estilo plotly EXPERIMENTAL"

#: pozo/themes/__init__.py:19
msgid "Color of the fill EXPERIMENTAL"
msgstr "Color del relleno EXPERIMENTAL"

#: pozo/themes/__init__.py:20
msgid "A fill between two separate axes EXPERIMENTAL"
msgstr "Un relleno entres dos ejes diferentes EXPERIMENTAL"

#: pozo/themes/__init__.py:23
msgid ""
"package theme: a theme engine for pozo\n"
"\n"
"    The theme package provides several theme objects, which can be attached "
"to pozo graphs, tracks, axes, and traces (.set_theme()) to provide "
"information about styling during rendering. Regular dictionaries can be "
"theme objects, and their possible keys are described here. Other theme "
"objects are described in their own documentation.\n"
"\n"
msgstr ""
"paquete theme (tema): un motor de tema\n"
"\n"
"    El paquete \"theme\" provee varios objetos de tema, lo que se pueden "
"adjuntar a pozo.Graph, pozo.Track, pozo.Axis, y pozo.trace (`.set_theme()`) "
"para proveer información del estilo sobre la renderización. Dicionarrios "
"sencillos se pueden usar como objetos de tema, y sus claves posibles se "
"describen acá. Otras opciones de objetos de tema se describen en su propio ."
"help().\n"
"\n"

#: pozo/themes/__init__.py:30
msgid "Possible theme keys:\n"
msgstr "Claves de tema posibles:\n"

#: pozo/themes/__init__.py:95
msgid ""
"method set_theme: sets the theme of object\n"
"\n"
"Args:\n"
"    theme (Theme or dict): The theme you'd like to set"
msgstr ""
"método set_theme (pon_tema): se pone el tema del objeto\n"
"\n"
"Args:\n"
"    theme (Theme o dict): El tema para ponerse"

#: pozo/themes/__init__.py:118
msgid ""
"method get_theme: returns a context-less theme definition\n"
"\n"
"Returns:\n"
"    A theme, no context attached"
msgstr ""
"método get_theme (saca_tema): se duevlve un tema sin contexto\n"
"\n"
"Devuelve:\n"
"    Un tema, sin contexto"

#: pozo/axes.py:7
msgid ""
"class Axis: part of a coordinate system and contains various pozo.Trace (and "
"other drawables)\n"
msgstr ""
"clase Axis (eje): parte de un sistema de coordinadas y contiene varios "
"objetos pozo.Trace (y otros dibujables)\n"

#: pozo/__init__.py:26
msgid ""
"package pozo: the visualization engine, pozo\n"
"\n"
"Para cambiar a español: `pozo.es()`\n"
"\n"
"https://github.com/geopozo/pozo-demo is a good learning template and "
"quickstart.\n"
"\n"
"***** Description:\n"
"\n"
"pozo creates a tree structure to describe your graph:\n"
"\n"
"───Graph─┬─Track───Axis─┬─Trace: \"CALI\"\n"
"         │              └─Trace: \"CGR\"\n"
"         ├─Track─┬─Axis─┬─Trace: \"RHOB\"\n"
"         │       │      ├─Trace: \"NPHI\"\n"
"         │       │      ├─Trace: \"LLD\"\n"
"         │       │      └─Trace: \"LLS\"\n"
"         │       └─Axis───Trace: \"ARP\"\n"
"         └─Track───Axis───Trace: \"RPA\"\n"
"\n"
"***** Highlighted sub-Objects:\n"
"\n"
"    Main Objects:\n"
"                pozo.Graph              - The main object.\n"
"                pozo.Trace              - What stores data point and line "
"data.\n"
"\n"
"    Highlighted Items:\n"
"                pozo.themes.cangrejo    - A basic theme to jump-start "
"styling. e.g. `myGraph.set_theme(\"cangrejo\")`\n"
"                pozo.units.check_las()  - Print basic data analysis and "
"sanitizing on your las files.\n"
msgstr ""
"paquete pozo: el motor de visualización\n"
"\n"
"To change the english: `pozo.en()`\n"
"\n"
"https://github.com/geopozo/pozo-demo-es es una buena plantilla.\n"
"\n"
"***** Descripción:\n"
"\n"
"pozo crea una estructura de árbol para describir el gráfico:\n"
"\n"
"───Graph─┬─Track───Axis─┬─Trace: \"CALI\"\n"
"         │              └─Trace: \"CGR\"\n"
"         ├─Track─┬─Axis─┬─Trace: \"RHOB\"\n"
"         │       │      ├─Trace: \"NPHI\"\n"
"         │       │      ├─Trace: \"LLD\"\n"
"         │       │      └─Trace: \"LLS\"\n"
"         │       └─Axis───Trace: \"ARP\"\n"
"         └─Track───Axis───Trace: \"RPA\"\n"
"\n"
"***** sub-Objetos Destacados:\n"
"\n"
"    Objetos Principales:\n"
"                pozo.Graph              - El gráfico.\n"
"                pozo.Trace              - Lo que guarda los puntos y lineas "
"(los datos).\n"
"\n"
"    Unidades Destacadas:\n"
"                pozo.themes.cangrejo    - Un tema principal para empezar con "
"un estilo. `myGraph.set_theme(\"cangrejo\")`\n"
"                pozo.units.check_las()  - Imprimir un análisis basico para "
"ayudar a lavar los archivos de las.\n"

#: pozo/drawable.py:65
msgid ""
"method latest_version: returns the latest version for versioned properties\n"
"Returns:\n"
"    The index of the latest version"
msgstr ""

#: pozo/drawable.py:71
msgid ""
"method new_version: creates a new version at end of version list (new latest "
"version)\n"
"\n"
"Whether or not the new version points to anything depends on the following:\n"
"\n"
"Args:\n"
"    copy (boolean): if True, new_version is created with a .copy() of the "
"old version (default False)\n"
"    deep (boolean) if True, new_version is created with a deep_copy() of the "
"old version (default True)"
msgstr ""

#: pozo/drawable.py:84
msgid ""
"method insert_version: creates a new version after currently selected "
"version\n"
"\n"
"Whether or not the new version points to anything depends on the following:\n"
"\n"
"Args:\n"
"    copy (boolean): if True, new_version is created with a .copy() of the "
"old version (default False)\n"
"    deep (boolean) if True, new_version is created with a deep_copy() of the "
"old version (default True)"
msgstr ""

#: pozo/drawable.py:97
msgid ""
"method remove_version: removes either the current version or specified "
"version\n"
"\n"
"Args:\n"
"    version (None or number): Specify the version to be removed or leave "
"empty to remove current version"
msgstr ""

#: pozo/drawable.py:112
msgid ""
"method get_version_dict: returns a dict struct of all versions and their "
"properties (internal names)\n"
"Returns:\n"
"    dictionary of versions and properties"
msgstr ""

#: pozo/traces.py:9
#, fuzzy
#| msgid ""
#| "class Trace: contains one drawable data array\n"
#| "\n"
#| "Trace is a unit-aware pointer for a data and depth array. It also stores "
#| "a mnemonic (name). It is not supposed to store data, but point to the "
#| "data and then render that data into a graph later using the depth as the "
#| "Y-axis. Depth and data must be the same shape at all times, they can be "
#| "replaced together.\n"
#| "\n"
#| "Data and its unit are versioned properties. That is, if you want to "
#| "change the data without losing the original, you can use the functions as "
#| "they are described below (new_version() etc). You can set the version "
#| "with `mytrace.version =`. The depth and its unit are expected to be "
#| "constants.\n"
#| "\n"
#| "Pozo attempts to be agnostic towards array type: series, nparrays, "
#| "polars, pandas, lists are all accepted. pint.Quantity wrappers are often "
#| "accepted as well.\n"
#| "\n"
#| "***** Constructor: pozo.Trace(...)\n"
#| "Args:\n"
#| "    data (array): most types of arrays are accepted, including one "
#| "wrapped in pint.Quantity\n"
#| "    **kwargs:\n"
#| "        mnemonic (str): REQUIRED: the name/mnemonic of the trace\n"
#| "        name (str): synonym for mnemonic, don't include both\n"
#| "        unit (str or pint.Unit): describes the data unit\n"
#| "        depth (array): another array that must be the same size as data, "
#| "can also be pint.Quantity\n"
#| "        depth_unit (str or pint.Unit): describes the depth unit\n"
#| "        original_data (any): A pointer to where the original data was "
#| "extracted from, useful if planning to re-output to a LAS file\n"
msgid ""
"class Trace: contains one drawable data array\n"
"\n"
"Trace is a unit-aware pointer for a data and depth array. It also stores a "
"mnemonic (name). It is not supposed to store data, but point to the data and "
"then render that data into a graph later using the depth as the Y-axis. "
"Depth and data must be the same shape at all times, they can be replaced "
"together.\n"
"\n"
"Data and its unit are versioned properties. That is, if you want to change "
"the data without losing the original, you can use the functions as they are "
"described below (new_version() etc). You can set the version with `mytrace."
"version =`. The depth and its unit are not versioned, only data and unit. It "
"always starts at .version == 0.\n"
"\n"
"Pozo attempts to be agnostic towards array type: series, nparrays, polars, "
"pandas, lists are all accepted. pint.Quantity wrappers are often accepted as "
"well.\n"
"\n"
"***** Constructor: pozo.Trace(...)\n"
"Args:\n"
"    data (array): most types of arrays are accepted, including one wrapped "
"in pint.Quantity\n"
"    **kwargs:\n"
"        mnemonic (str): REQUIRED: the name/mnemonic of the trace\n"
"        name (str): synonym for mnemonic, don't include both\n"
"        unit (str or pint.Unit): describes the data unit\n"
"        depth (array): another array that must be the same size as data, can "
"also be pint.Quantity\n"
"        depth_unit (str or pint.Unit): describes the depth unit\n"
"        original_data (any): A pointer to where the original data was "
"extracted from, useful if planning to re-output to a LAS file\n"
msgstr ""
"clase Trace (trazo): contiene una tabla de datos dibujable\n"
"\n"
"Trace es consciente de unidades, y una referencia a una tabla de datos y "
"profundidades. Tambien se guarda una mnemotécnica, o nombre. No se debe "
"almacenar datos, pero hacer referencia los datos y luego renderizar al "
"gráfico usando la profundad como el eje Y. La profunidad y los datos deben "
"tener el mismo tamaño a todo momento, y se pueden reemplazar al mismo "
"tiemo.\n"
"\n"
"Los datos y sus unidades son propriedades versionados. Es decir, si se "
"quiere cambiar los datos sin perder los originales, se puede usar las "
"funciones como se describen abajo (new_version(), etc). Se puede fijar la "
"versión con el atributo `.version`, parte del trace. La profunidad y sus "
"unidades deben ser constantes.\n"
"\n"
"Pozo intenta ser agnóstico hacia el tipo de tabla: series, nparrays, polar, "
"pandas, llists están bien. Tambien, contenendores de pint.Quanty están "
"bien.\n"
"\n"
"***** Constructor: pozo.Trace(...)\n"
"Args:\n"
"    data (table): Se aceptan tipos comunes, también en contenedor de pint."
"Quantity\n"
"    **kwargs:\n"
"        mnemonic (str): OBLIGATORIO: el nombre/mnemotécnica del trazo\n"
"        name (str):  sinónimo de mnemotécnica, no incluir los dos\n"
"        unit (str or pint.Unit): se describe la unidad de los datos\n"
"        depth (table): otra table, el mismo tamaño de data, que también "
"puede ser un pint.Quantity\n"
"        depth_unit (str or pint.Unit): se describe la unidad de la "
"profundiad\n"
"        original_data (cualquier): Una referencia a donde estuvieron los "
"datos originales, que es útil si se genera un archivo de LAS nuevo\n"

#: pozo/traces.py:33
msgid ""
"method set_name: set name/mnemonic of trace\n"
"Args:\n"
"    name (str): The name/mnemonic you'd like to set"
msgstr ""
"método set_name (pon_nombre): fijar el nombre/mnemotécnica del trazo\n"
"Args:\n"
"    name (str): El nombre/mnemotécnica para poner"

#: pozo/traces.py:39
msgid ""
"method get_name: get name/mnemonic of trace\n"
"Returns:\n"
"    The name/mnemonic of the trace"
msgstr ""
"método get_name (saca_nombre): conseguir el nombre/mnemotécnica del trazo\n"
"Devuelve:\n"
"    El nombre/mnemotécnica del trazo"

#: pozo/traces.py:54
#, python-format
msgid "Unrecognized unit type: %s"
msgstr "Tipo de unidad desconocido: %s"

#: pozo/traces.py:64
msgid "`depth` cannot be `None`, you must supply a depth"
msgstr "`depth` no se puede ser `None`, debe haber una profundidad"

#: pozo/traces.py:66 pozo/traces.py:110 pozo/traces.py:153
#, python-format
msgid "`depth` and `data` have different lengths. data/depth: %d/%d"
msgstr "`depth` y `data` tienen tamaños diferentes. data/depth: %d/%d"

#: pozo/traces.py:71
msgid "`mnemonic` and `name` are the same thing, please specify only one"
msgstr "`menmonic` y `name` son los mismos: se especifca solo uno"

#: pozo/traces.py:75
msgid "You must supply `mnemonic` or `name` (not both)"
msgstr "Se debe dar o `mnemonic`o `name`, y no los dos"

#: pozo/traces.py:84
msgid ""
"method find_nearest: retrieve index and actual value of depth closes to "
"input\n"
"\n"
"If you're looking for a value at 1000ft, but we only have a value at 998 ft "
"and 1001 ft, will return 1001 ft and its index\n"
"\n"
"Args:\n"
"    value (number): The depth value you are looking for\n"
"Returns:\n"
"    idx (number): The index of the value closest to what you're looking for\n"
"    value (number): The actual value at that index\n"
msgstr ""
"método find_nearest (buscar más cerca): conseguir índice y valor de la "
"profundidad más cerca de la buscada\n"
"\n"
"\n"
"Si se busca un valor a 1000 pies, pero solo hay valor entre 998 pies y 1001 "
"pies, se devuelve el índice y valor de 1000 pies.\n"
"\n"
"Args:\n"
"    value (número): La profundida que se busca\n"
"Returns:\n"
"    idx (número): El índice del valor más cerca de lo que se busca\n"
"    value (número): El valor actual al índice\n"

#: pozo/traces.py:99
msgid ""
"method set_data: set the data and optionally the unit, depth, and "
"depth_unit\n"
"Args:\n"
"    data (array): the data to set\n"
"    unit (str of pint.Unit): the unit associated with the data\n"
"    depth (array): an array of depth values\n"
"    depth_unit: the unit associated with the depth"
msgstr ""
"método set_data (pon_datos): poner los datos y talvez la unidad, "
"profundidad, y la unidad de profundidad.\n"
"Args:\n"
"    data (tabla): los datos para poner\n"
"    unit (str o pint.Unit): la unidad de los datos\n"
"    depth (table): una tabla de los valores de profunidad\n"
"    depth_unit: la unidad de las profunidades"

#: pozo/traces.py:121
msgid ""
"method get_data: returns the data\n"
"Args:\n"
"    slice_by_depth (tuple): accepts a tuple using slice syntax (:) of "
"positive values to select by depth\n"
"    force_unit (boolean): will force wrap the return in a pint.Quantity if "
"True (default False)\n"
"    clean (boolean): a hack to deal with poorly behaved renderers, will "
"remove all non-finite values (default False)\n"
"Returns:\n"
"    the data"
msgstr ""
"método get_data (saca_datos): devuelve los datos\n"
"Args:\n"
"     slice_by_depth (tuple): se accepta un tuple que se usa la misma "
"sintaxis de un `slice` de python, pero solo se aceptan valores positivos de "
"las profundidas buscadas\n"
"    force_unit (booleano): se hace que el valor devuelto siempre esta "
"envueleto por un pint.Quantity (Falso predeterminado)\n"
"    clean (booleano): un hackeo para lidear con mal comportamiento de los "
"renderizadores- se quitan los valores no-finitos (Falso predeterminado)\n"
"Devuelve:\n"
"    los datos"

#: pozo/traces.py:146
msgid ""
"method set_depth: sets the depth\n"
"Args:\n"
"    depth (array): The depth to set\n"
"    depth_unit (str or pint.Unit): The depth's associated unit"
msgstr ""
"método set_depth (pon_profundidad): poner la tabla de la profundidad\n"
"Args:\n"
"    depth (tabla): La table para poner\n"
"    depth_unit (str o pint.Unit): La unidad de la profunidad"

#: pozo/traces.py:161
msgid ""
"method get_depth: returns the depth array\n"
"Args:\n"
"    slice_by_depth (tuple): accepts a tuple using slice syntax (:) of "
"positive values to select by depth\n"
"    force_unit (boolean): will force wrap the return in a pint.Quantity if "
"True (default False)\n"
"    clean (boolean): a hack to deal with poorly behaved renderers, will "
"remove depths where non-finite values in the data (default False)\n"
"Returns:\n"
"    depth array or slice"
msgstr ""
"método get_depth (saca_profundidad): devuelve la tabla de profunidad\n"
"Args:\n"
"    slice_by_depth (tuple): se accepta un tuple que se usa la misma sintaxis "
"de un `slice` de python, pero solo se aceptan valores positivos de las "
"profundidas buscadas\n"
"    force_unit (booleano): se hace que el valor devuelto siempre esta "
"envueleto por un pint.Quantity (Falso predeterminado)\n"
"    clean (booleano): un hackeo para lidear con mal comportamiento de los "
"renderizadores- se quitan los valores no-finitos en la tabla de datos (Falso "
"predeterminado)\n"
"Devuelve:\n"
"    los datos"

#: pozo/traces.py:187
msgid ""
"method set_unit: sets the unit associated with the data\n"
"Args:\n"
"    unit (str or pint.Unit): the unit to set"
msgstr ""
"método set_unit (pon_unidad): poner la unidad de los datos\n"
"Args:\n"
"    unit (str o pint.Unit): la unidad par poner"

#: pozo/traces.py:194
msgid ""
"method get_unit: gets the unit associated with the data\n"
"Returns:\n"
"    the unit exactly as it was set"
msgstr ""
"método get_unit (saca_unidad): devuelve la unidad de los datos:\n"
"Devuelve:\n"
"    la unidad precisa como se fijó"

#: pozo/traces.py:200
msgid ""
"method set_depth_unit: sets the unit associated with the depth\n"
"Args:\n"
"    unit (str or pint.Unit): the unit to set"
msgstr ""
"método set_depth_unit (pon_unidad_de_profunidad):\n"
"Args:\n"
"    unidad (str o pint.Unit): la unidad para poner"

#: pozo/traces.py:207
msgid ""
"method get_depth_unit: gets the unit associated with the depth\n"
"Returns:\n"
"    the unit exactly as it was set"
msgstr ""
"método get_depth_unit (saca_unidad_de_profunidad): se consigue la unidad de "
"la tabla de profundidades\n"
"Devuelve:\n"
"    la unidad como se pusó"

#: pozo/traces.py:213
msgid ""
"method convert_depth_unit: will convert the depth to the specified unit, "
"example ft to meters\n"
"\n"
"Since we cannot graph traces specified with different depth units, this can "
"be used to make a permanent conversion.\n"
"\n"
"It will also change the recorded unit.\n"
"\n"
"Args:\n"
"    unit (str or pint.Unit): the target unit\n"
msgstr ""
"método convert_depth_unit (convierte_unidad_de_profunidad): se convierte la "
"table de profunidad a la unidad dada, por ejemplo ft a metros\n"
"\n"
"Debido que no podemos renderizar trazos dados donde las profunidades tienen "
"unidades distintas, esto puede hacer un cambio permanente\n"
"\n"
"También, se cambia la unidad registrada y devuelte con get_depth_unit().\n"
"\n"
"Args:\n"
"    unit (str o pint.Unit): la unidad querida\n"

#: pozo/traces.py:238
msgid ""
"method convert_unit: a convenience function to change the unit of your data\n"
"\n"
"Most Trace functions don't permanently change and/or create new data arrays: "
"this one does.\n"
"\n"
"Args:\n"
"    unit (str or pint.Unit): the target unit\n"
msgstr ""
"método convert_unit (convierte_unidad): una función ayudable para cambiar la "
"unidad de los datos\n"
"\n"
"Si bien la mayoria de funciones de Trace no cambian ni crean datos nuevos, "
"esto sí.\n"
"\n"
"Args:\n"
"\n"
"    unit (str o pint.Unit): la unidad querida\n"

#: pozo/traces.py:257
msgid ""
"method set_mnemonic: set name/mnemonic of trace\n"
"Args:\n"
"    mnemonic (str): The name/mnemonic you'd like to set"
msgstr ""
"método set_mnemonic (pon_mnemotécnica): poner nombre/mnemotécnica del trazo\n"
"Args:\n"
"    menomic (str): El nombre/mnemotécnica para poner"

#: pozo/traces.py:263
msgid ""
"method get_mnemonic: get name/mnemonic of trace\n"
"Returns:\n"
"    The name/mnemonic of the trace"
msgstr ""
"método get_mnemonic (saca_mnemotécnica): conseguir el nombre/mnemotécnica "
"del trazo\n"
"Devuelve:\n"
"    El nombre/mnemotecnica del trazo"

#: pozo/traces.py:275
msgid ""
"method get_dict: return relevant properties of trace as key-value "
"dictionary\n"
"\n"
"Returns:\n"
"    A key-value dictionary"
msgstr ""
"método get_dict: devuelve propriedades del trazo como diccionario de clave-"
"valor\n"
"\n"
"Devuelve:\n"
"    Un diccionario"

#: pozo/traces.py:294
msgid ""
"method get_theme: return the stored theme with a context object\n"
"\n"
"Returns:\n"
"    A theme object (pozo.themes.help()) with attached context for this trace."
msgstr ""
"método get_theme (saca_tema): devuelve el tema guardado con un objeto do "
"contexto\n"
"\n"
"Devuelve:\n"
"    Un objeto de tema (pozo.themes.help()) con contexto adjunto para este "
"trazo."

#: pozo/utils/docs.py:10
msgid ""
"\n"
"***** sub-Object Directory (all have .help()):\n"
"\n"
msgstr ""
"\n"
"***** sub-Objeto Directorio (todo tiene .help()):\n"
"\n"
