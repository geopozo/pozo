# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 21:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: pozo/themes/__init__.py:11
msgid "Can be a single color value or list of color values from colour package"
msgstr ""

#: pozo/themes/__init__.py:12
msgid "A number in pixels"
msgstr ""

#: pozo/themes/__init__.py:13
msgid "If true, will force show the item even if it has no children"
msgstr ""

#: pozo/themes/__init__.py:14
msgid "If true, will not show the item"
msgstr ""

#: pozo/themes/__init__.py:15
msgid "Set's the default min and max x value for this item"
msgstr ""

#: pozo/themes/__init__.py:16
msgid "Specifies the units of range"
msgstr ""

#: pozo/themes/__init__.py:17
msgid "Can be log or linear"
msgstr ""

#: pozo/themes/__init__.py:18
msgid "a plotly fill description EXPERIMENTAL"
msgstr ""

#: pozo/themes/__init__.py:19
msgid "color of the fill EXPERIMENTAL"
msgstr ""

#: pozo/themes/__init__.py:20
msgid "a fill between two separate axes EXPERIMENTAL"
msgstr ""

#: pozo/themes/__init__.py:23
msgid ""
"package theme: a theme engine for pozo\n"
"\n"
"    The theme package provides several theme objects, which can be attached "
"to pozo graphs, tracks, axes, and traces (.set_theme()) to provide "
"information about styling during rendering. Regular dictionaries can be "
"theme objects, and their possible keys are described here. Other theme "
"objects are described in their own documentation.\n"
"\n"
msgstr ""

#: pozo/themes/__init__.py:30
msgid "Possible theme keys:\n"
msgstr ""

#: pozo/themes/__init__.py:95
msgid ""
"method set_theme sets the theme of object\n"
"\n"
"Args:\n"
"    theme (Theme or dict): The theme you'd like to set"
msgstr ""

#: pozo/themes/__init__.py:118
msgid ""
"method get_theme returns a context-less theme definition\n"
"\n"
"Returns:\n"
"    A theme, no context attached"
msgstr ""

#: pozo/axes.py:7
msgid ""
"class Axis: part of a coordinate system and contains various pozo.Trace (and "
"other drawables)\n"
msgstr ""

#: pozo/__init__.py:26
msgid ""
"package pozo: the visualization engine, pozo\n"
"\n"
"Para cambiar a español: `pozo.es()`\n"
"\n"
"https://github.com/geopozo/pozo-demo is a good learning template and "
"quickstart.\n"
"\n"
"***** Description:\n"
"\n"
"pozo creates a tree structure to describe your graph:\n"
"\n"
"───Graph─┬─Track───Axis─┬─Trace: \"CALI\"\n"
"         │              └─Trace: \"CGR\"\n"
"         ├─Track─┬─Axis─┬─Trace: \"RHOB\"\n"
"         │       │      ├─Trace: \"NPHI\"\n"
"         │       │      ├─Trace: \"LLD\"\n"
"         │       │      └─Trace: \"LLS\"\n"
"         │       └─Axis───Trace: \"ARP\"\n"
"         └─Track───Axis───Trace: \"RPA\"\n"
"\n"
"***** Highlighted sub-Objects:\n"
"\n"
"    Main Objects:\n"
"                pozo.Graph              - The main object.\n"
"                pozo.Trace              - What stores data point and line "
"data.\n"
"\n"
"    Highlighted Items:\n"
"                pozo.themes.cangrejo    - A basic theme to jump-start "
"styling. e.g. `myGraph.set_theme(\"cangrejo\")`\n"
"                pozo.units.check_las()  - Print basic data analysis and "
"sanitizing on your las files.\n"
msgstr ""

#: pozo/traces.py:9
msgid ""
"class Trace: contains one drawable data array\n"
"\n"
"Trace is a unit-aware pointer for a data and depth array. It also stores a "
"mnemonic (name). It is not supposed to store data, but point to the data and "
"then render that data into a graph later using the depth as the Y-axis. "
"Depth and data must be the same shape at all times, they can be replaced "
"together.\n"
"\n"
"Data and its unit are versioned properties. That is, if you want to change "
"the data without losing the original, you can use the functions as they are "
"described below (new_version() etc). You can set the version with `mytrace."
"version =`. The depth and its unit are expected to be constants.\n"
"\n"
"Pozo attempts to be agnostic towards array type: series, nparrays, polars, "
"pandas, lists are all accepted. pint.Quantity wrappers are often accepted as "
"well.\n"
"\n"
"***** Constructor: pozo.Trace(...)\n"
"Args:\n"
"    data (array): most types of arrays are accepted, including one wrapped "
"in pint.Quantity\n"
"    **kwargs:\n"
"        mnemonic (str): REQUIRED: the name/mnemonic of the trace\n"
"        name (str): synonym for mnemonic, don't include both\n"
"        unit (str or pint.Unit): describes the depth unit\n"
"        depth (array): another array that must be the same size as data, can "
"also be pint.Quantity\n"
"        depth_unit (str or pint.Unit): describes the depth unit\n"
"        original_data (any): A pointer to where the original data was "
"extracted from, useful if planning to re-output to a LAS file\n"
msgstr ""

#: pozo/traces.py:33
msgid ""
"method set_name: set name/mnemonic of trace\n"
"Args:\n"
"    name (str): The name/mnemonic you'd like to set"
msgstr ""

#: pozo/traces.py:39
msgid ""
"method get_name: get name/mnemonic of trace\n"
"Returns:\n"
"    The name/mnemonic of the trace"
msgstr ""

#: pozo/traces.py:54
#, python-format
msgid "Unrecognized unit type: %s"
msgstr ""

#: pozo/traces.py:64
msgid "`depth` cannot be `None`, you must supply a depth"
msgstr ""

#: pozo/traces.py:66 pozo/traces.py:110 pozo/traces.py:153
#, python-format
msgid "`depth` and `data` have different lengths. data/depth: %d/%d"
msgstr ""

#: pozo/traces.py:71
msgid "`mnemonic` and `name` are the same thing, please specify only one"
msgstr ""

#: pozo/traces.py:75
msgid "You must supply `mnemonic` or `name` (not both)"
msgstr ""

#: pozo/traces.py:84
msgid ""
"method find_nearest: retrieve index and actual value of depth closes to "
"input\n"
"\n"
"If you're looking for a value at 1000ft, but we only have a value at 998 ft "
"and 1001 ft, you would use this.\n"
"\n"
"Args:\n"
"    value (number): The depth value you are looking for\n"
"Returns:\n"
"    idx (number): The index of the value closest to what you're looking for\n"
"    value (number): The actual value at that index\n"
msgstr ""

#: pozo/traces.py:99
msgid ""
"method set_data: set the data and optionally the unit, depth, and "
"depth_unit\n"
"Args:\n"
"    data (array): the data to set\n"
"    unit (str of pint.Unit): the unit associated with the data\n"
"    depth (array): an array of depth values\n"
"    depth_unit: the unit associated with the depth"
msgstr ""

#: pozo/traces.py:121
msgid ""
"method get_data: returns the data\n"
"Args:\n"
"    slice_by_depth (tuple): accepts a tuple using slice syntax (:) of "
"positive values to select by depth\n"
"    force_unit (boolean): will force wrap the return in a pint.Quantity if "
"True (default False)\n"
"    clean (boolean): a hack to deal with poorly behaved renderers, will "
"remove all non-finite values (default False)\n"
"Returns:\n"
"    the data"
msgstr ""

#: pozo/traces.py:146
msgid ""
"method set_depth: sets the depth\n"
"Args:\n"
"    depth (array): The depth to set\n"
"    depth_unit (str or pint.Unit): The depth's associated unit"
msgstr ""

#: pozo/traces.py:161
msgid ""
"method get_depth: returns the depth array\n"
"Args:\n"
"    slice_by_depth (tuple): accepts a tuple using slice syntax (:) of "
"positive values to select by depth\n"
"    force_unit (boolean): will force wrap the return in a pint.Quantity if "
"True (default False)\n"
"    clean (boolean): a hack to deal with poorly behaved renderers, will "
"remove depths where non-finite values in the data (default False)\n"
"Returns:\n"
"    depth array or slice"
msgstr ""

#: pozo/traces.py:187
msgid ""
"method set_unit: sets the unit associated with the data\n"
"Args:\n"
"    unit (str or pint.Unit): the unit to set"
msgstr ""

#: pozo/traces.py:194
msgid ""
"method get_unit: gets the unit associated with the data\n"
"Returns:\n"
"    the unit exactly as it was set"
msgstr ""

#: pozo/traces.py:200
msgid ""
"method set_depth_unit: sets the unit associated with the depth\n"
"Args:\n"
"    unit (str or pint.Unit): the unit to set"
msgstr ""

#: pozo/traces.py:207
msgid ""
"method get_depth_unit: gets the unit associated with the depth\n"
"Returns:\n"
"    the unit exactly as it was set"
msgstr ""

#: pozo/traces.py:213
msgid ""
"method convert_depth_unit: will convert the depth to the specified unit, "
"example ft to meters\n"
"\n"
"Since we cannot graph traces specified with different depth units, this can "
"be used to make a permanent conversion.\n"
"\n"
"It will also change the recorded unit.\n"
"\n"
"Args:\n"
"    unit (str or pint.Unit): the target unit\n"
msgstr ""

#: pozo/traces.py:238
msgid ""
"method convert_unit: a convenience function to change the unit of your data\n"
"\n"
"Most Trace functions don't permanently change and/or create new data arrays: "
"this one does.\n"
"\n"
"Args:\n"
"    unit (str or pint.Unit): the target unit\n"
msgstr ""

#: pozo/traces.py:257
msgid ""
"method set_mnemonic: set name/mnemonic of trace\n"
"Args:\n"
"    mnemonic (str): The name/mnemonic you'd like to set"
msgstr ""

#: pozo/traces.py:263
msgid ""
"method get_mnemonic: get name/mnemonic of trace\n"
"Returns:\n"
"    The name/mnemonic of the trace"
msgstr ""

#: pozo/traces.py:275
msgid ""
"method get_dict: return relevant properties of trace as key-value "
"dictionary\n"
"\n"
"Returns:\n"
"    A key-value dictionary"
msgstr ""

#: pozo/traces.py:294
msgid ""
"method get_theme: return the stored theme with a context object\n"
"\n"
"Returns:\n"
"    A theme object (pozo.themes.help()) with attached context for this trace."
msgstr ""

#: pozo/utils/docs.py:10
msgid ""
"\n"
"***** sub-Object Directory (all have .help()):\n"
"\n"
msgstr ""
